<?xml version='1.0'?>

<project name='book-common' default='all'>

  <property name='imagemagick'
            value='C:/Program Files/ImageMagick-7.1.0-Q16-HDRI/convert.exe'/>

  <property name='rnv'
            value='c:/Program Files (x86)/rnv-1.7.9/rnv.exe'/>

  <property name='epubcheck500'
            value='c:/users/emuller/home/eric/epub/epubcheck/epubcheck-5.0.0-beta-2/epubcheck.jar'/>


  <property name='exportdir'
            value='c:/users/emuller/home/eric/efele.net/ebooks/livres'/>

  <property name='tools'        value='../../../tools'/>

  <path id='classpath'>
    <pathelement path="${tools}/java"/>
    <pathelement path="${tools}/java/saxon-he-10.0.jar"/>
    <pathelement path="${tools}/java/icu4j-4_8_1_1.jar"/>
    <pathelement path="${tools}/java/aglj40.jar"/>
    <pathelement path="${tools}/java/rideau.jar"/>
    <pathelement path="${tools}/java/afe.jar"/>
  </path>


  <property name='correction' value='['/>
  <property name='review' value='no'/>
  <property name='endnotes' value='no'/>
  <property name='dotoi'  value='no'/>

  <!-- schema to use by default -->
  <property name='schema'         value='${tools}/bml.rnc'/>
  <property name='toefele_xsl'    value='${tools}/toefele.xsl'/>

  <property name='collectionId'   value=''/>
  <property name='collectionName' value=''/>

  <macrodef name='xquery'>
    <attribute name='src'/>
    <attribute name='q'/>
    <attribute name='prop'/>
    <sequential>
      <java classname="net.sf.saxon.Query" fork="true" outputproperty='@{prop}'>
        <classpath refid="classpath"/>
        <arg value="-s:@{src}"/>
        <arg value="{@{q}}"/>
        <arg value="!method=text"/>
      </java>
    </sequential>
  </macrodef>

  <macrodef name='toefele'>
    <attribute name='src'/>
    <attribute name='dest'/>
    <attribute name='endnotes'/>
    <attribute name='review'/>
    <attribute name='mobi' default='no'/>
    <attribute name='tirage'/>
    <attribute name='correction'/>

    <sequential>
      <xquery src='edition.xml' q='data(//*:style/@colophon)' prop='tirage-font'/>

      <java classname="net.sf.saxon.Transform" fork="true">
        <classpath refid="classpath"/>
        <arg value="-o:@{dest}"/>
        <arg value="-xsl:${toefele_xsl}"/>
        <arg value="colophon=@{src}.colophon"/>
        <arg value="tirage-font=${tirage-font}"/>
        <arg value="correction=@{correction}"/>
        <arg value="mobi=@{mobi}"/>
        <arg value="endnotes=@{endnotes}"/>
        <arg value="review=@{review}"/>
        <arg value="dotoi=${dotoi}"/>
        <arg value="-s:@{src}.bml"/>
      </java>
    </sequential>      
  </macrodef>

  <macrodef name='epubzip'>
    <attribute name='epubfile'/>
    <attribute name='dir'/>

    <sequential>
      <delete file="@{epubfile}"/>

      <zip destfile='@{epubfile}' 
           compress='true' level='9' basedir='@{dir}' includes='META-INF/**'/>

      <zip destfile='@{epubfile}' update='true' keepcompression='true' 
           compress='true' level='9' basedir='@{dir}' includes='OEBPS/**'/>

      <!-- last, to get it first in the zip -->
      <zip destfile='@{epubfile}' update='true' keepcompression='true' 
           compress='false' basedir='@{dir}' includes='mimetype'/>
    </sequential>
  </macrodef>


  <macrodef name='epub3check'>
    <attribute name='epub'/>
    <sequential>
      <java jar='${epubcheck500}' fork='true'>
        <arg value="@{epub}"/>
      </java>
    </sequential>
  </macrodef>

  <macrodef name='spacehandler'>
    <attribute name='mode'/>
    <attribute name='src'/>
    <attribute name='dest'/>

    <sequential>
      <java classname='net.efele.epub.SpaceHandler' fork='true'
            outputProperty='spaceoutput' logError='true'>
        <classpath refid='classpath'/>
        <arg value='@{mode}'/>
        <arg value='@{src}'/>
        <arg value='@{dest}'/>
      </java>
    </sequential>
  </macrodef>





  <macrodef name='dovalidate'>
    <attribute name='src'/>
    <attribute name='schema'/>
    <sequential>
      <exec executable='${rnv}'>
        <arg value="-q"/>
        <arg value="@{schema}"/>
        <arg value="@{src}"/>
      </exec>
    </sequential>
  </macrodef>

  <macrodef name='validate-schema'>
    <attribute name='src'/>
    <sequential>
      <dovalidate src='@{src}' schema='${schema}'/>
    </sequential>
  </macrodef>

  <macrodef name='validate-bml'>
    <attribute name='src'/>
    <sequential>
      <dovalidate src='@{src}' schema='${tools}/bml.rnc'/>
    </sequential>
  </macrodef>




  <macrodef name='images'>
    <attribute name='src'/>
    <attribute name='dest'/>

    <sequential>
      <java classname="net.sf.saxon.Transform" fork="true"
            outputproperty='images.@{dest}'>
        <classpath refid="classpath"/>
        <arg value="-xsl:${tools}/bml2images.xsl"/>
        <arg value="-s:@{src}"/>
      </java>
      
      <copy todir='@{dest}/images' flatten='true'>
        <filelist dir="." files='${images.@{dest}}'/>
      </copy>
    </sequential>
  </macrodef>

  <macrodef name='scripts'>
    <attribute name='src'/>
    <attribute name='dest'/>

    <sequential>
      <java classname="net.sf.saxon.Transform" fork="true"
            outputproperty='scripts.@{dest}'>
        <classpath refid="classpath"/>
        <arg value="-xsl:${tools}/bml2scripts.xsl"/>
        <arg value="-s:@{src}"/>
      </java>
      
      <copy todir='@{dest}' flatten='true'>
        <filelist dir="." files='${scripts.@{dest}}'/>
      </copy>
    </sequential>
  </macrodef>

  <macrodef name='fonts'>
    <attribute name='font-files'/>
    <attribute name='id'/>
    <attribute name='x'/>
    <attribute name='flavor'/>
    
    <sequential>
      <java classname="net.efele.epub.FontEmbedder" fork="true">
        <classpath refid="classpath"/>
        <arg value='build/@{id}/@{flavor}/epub/OEBPS'/>
        <arg value='build/@{id}/@{flavor}/epub/OEBPS'/>
        <arg line='@{font-files}'/>
      </java>
    </sequential>
  </macrodef>

  <macrodef name='validate'>
    <attribute name='x'/>
    <sequential>
      <validate-bml x="@{x}"/>
    </sequential>
  </macrodef>




  <macrodef name='process-books'>
    <attribute name='a'/>
    <sequential>
      <antcall target='books'>
        <param name='action' value='@{a}'/>
      </antcall>
    </sequential>
  </macrodef>

  <macrodef name='book'>
    <attribute name='x'/>

    <sequential>
      <xquery src='@{x}.bml' q="substring-after(data(//*:metadata/*:electronique/@identificateur),'livres/')" prop='@{x}.myid'/>

      <antcall target='${action}'>
        <param name='id'          value='${@{x}.myid}'/>
        <param name='x'           value='@{x}'/>
      </antcall>
    </sequential>
  </macrodef>

  <macrodef name='bookwithid'>
    <attribute name='x'/>
    <attribute name='id'/>

    <sequential>
      <antcall target='${action}'>
        <param name='id'          value='@{id}'/>
        <param name='x'           value='@{x}'/>
      </antcall>
    </sequential>
  </macrodef>


  <macrodef name='process-collections'>
    <attribute name='a'/>
    <sequential>
      <antcall target='collections'>
        <param name='action' value='@{a}'/>
      </antcall>
    </sequential>
  </macrodef>

  <macrodef name='collection'>
    <attribute name='x'/>

    <sequential>
      <xquery src='@{x}.xml' q="substring-after(data(//*:collection/@id),'livres/')" prop='@{x}.myid'/>

      <antcall target='${action}'>
        <param name='id'           value='${@{x}.myid}'/>
        <param name='x'            value='@{x}'/>
      </antcall>
    </sequential>
  </macrodef>



  <target name='collections'/>

  <target name='build'>
    <process-books a='build-book'/>
    <process-collections a='build-collection'/>
  </target>

  <target name='build-book' depends='tirages-book,thumbnail-book,catalog-book,desc-book'/>

  <target name='build-collection' depends='tirages-collection,thumbnail-collection,catalog-collection,desc-collection'/>


  <target name='tirages'>
    <process-books a='tirages-book'/>
    <process-collections a='tirages-collection'/>
  </target>

  <target name='tirages-book'>
    <bv id='${id}' x='${x}'/>
  </target>


  <target name='tirages-collection'>
    <mkdir dir='results'/>
    <delete dir='results/${id}'/>
    <mkdir dir='results/${id}'/>

    <zip-tirage tirage='epub'      ext=''/>
  </target>

  <macrodef name='zip-tirage'>
    <attribute name='tirage'/>
    <attribute name='ext'/>
    <sequential>
      <zip destfile="results/${id}/${x}_@{tirage}@{ext}.zip" encoding="UTF-8">
        <mappedresources>
          <fileset dir="results" includes="*/*@{tirage}@{ext}"/>
          <flattenmapper/>
        </mappedresources>
      </zip>

    </sequential>
  </macrodef>


  <target name='thumbnail'>
    <process-books a='thumbnail-book'/>
    <process-collections a='thumbnail-collection'/>
  </target>

  <target name='thumbnail-book'>
    <mkdir dir='results'/>
    <mkdir dir='results/${id}'/>

    <xquery src='${x}.bml' q='data(//*:bml/*:cover/@src)' prop='mycover'/>
    <dothumbnail src='${mycover}' dest='results/${id}'/>
  </target>

  <target name='thumbnail-collection'>
    <mkdir dir='results'/>
    <mkdir dir='results/${id}'/>

    <xquery src='${x}.xml' q='data(//*:collection/@cover)' prop='mycover'/>
    <dothumbnail src='${mycover}' dest='results/${id}'/>
  </target>

  <macrodef name='dothumbnail'>
    <attribute name='src'/>
    <attribute name='dest'/>

    <sequential>
      <exec executable='${imagemagick}'>
        <arg line="@{src}"/>
        <arg line="-resize x120"/>
        <arg line="-bordercolor black -border 1 -matte"/>
        <arg line="( +clone -background grey -shadow 80x3+3+3 ) +swap -background none -mosaic"/>
        <arg line="@{dest}/thumbnail.png"/>
      </exec>
    </sequential>
  </macrodef>



  <target name='validate'>
    <process-books a='validate-book'/>
  </target>

  <target name='validate-book'>
    <validate-schema src='${x}.bml'/>

    <java classname="net.sf.saxon.Transform" fork="true">
      <classpath refid="classpath"/>
      <arg value="-xsl:${tools}/checknotes.xsl"/>
      <arg value="-s:${x}.bml"/>
    </java>
  </target>

  <target name='catalog'>
    <process-books a='catalog-book'/>
    <process-collections a='catalog-collection'/>
  </target>

  <target name='catalog-book'>
    <echo>----------------------------------- ${id} ${x}</echo>

    <mkdir dir='results'/>
    <mkdir dir='results/${id}'/>

    <delete file='results/${id}/catalog.txt'/>
    <java classname="net.sf.saxon.Transform" fork="true">
      <classpath refid="classpath"/>
      <arg value="-o:results/${id}/catalog.txt"/>
      <arg value="-xsl:${tools}/bml2catalog.xsl"/>
      <arg value="-s:${x}.bml"/>
    </java>

    <delete file='results/${id}/liste.html'/>
    <echo file='results/${id}/liste.html'>
      &lt;p>&lt;a href='livres/${id}/${x}.epub'>${id} ${x}&lt;/a>&lt;/p>
    </echo>

    <delete file='results/${id}/newsfeedentry.xml'/>
    <java classname="net.sf.saxon.Transform" fork="true">
      <classpath refid="classpath"/>
      <arg value="-o:results/${id}/newsfeedentry.xml"/>
      <arg value="-xsl:${tools}/bml2newsfeedentry.xsl"/>
      <arg value="-s:${x}.bml"/>
    </java>
  </target>

  <target name='catalog-collection'>
    <echo>----------------------------------- ${id} ${x}</echo>
    <mkdir dir='results'/>
    <mkdir dir='results/${id}'/>

    <java classname='net.sf.saxon.Transform' fork='true'>
      <classpath refid='classpath'/>
      <arg value="-o:results/${id}/catalog.txt"/>
      <arg value="-xsl:${tools}/catalog2catalog.xsl"/>
      <arg value="-s:${x}.xml"/>
    </java>
  </target>


  <target name='opds'>
    <process-books a='opds-book'/>
  </target>

  <target name='opds-book'>
    <echo>----------------------------------- ${id} ${x}</echo>

    <mkdir dir='results'/>
    <mkdir dir='results/${id}'/>

    <java classname="net.sf.saxon.Transform" fork="true">
      <classpath refid="classpath"/>
      <arg value="-o:results/${id}/${id}.opds.xml"/>
      <arg value="-xsl:${tools}/bml2opds.xsl"/>
      <arg value='file=${x}'/>
      <arg value="-s:${x}.bml"/>
    </java>
  </target>

  <target name='opds-collection'/>


  <target name='desc'>
    <process-books a='desc-book'/>
    <process-collections a='desc-collection'/>
  </target>

  <target name='desc-book'>
    <echo>----------------------------------- ${id} ${x}</echo>
    <mkdir dir='results'/>
    <mkdir dir='results/${id}'/>

    <available file="${x}.notes" property="notes.present"/>

    <java classname="net.sf.saxon.Transform" fork="true">
      <classpath refid="classpath"/>
      <arg value="-o:results/${id}/index.html"/>
      <arg value="-xsl:${tools}/bml2desc.xsl"/>
      <arg value="descPresent=${notes.present}"/>
      <arg value="desc=${x}.notes"/>
      <arg value="id=${id}"/>
      <arg value="collectionId=${collectionId}"/>
      <arg value="collectionName=${collectionName}"/>
      <arg value="bookFile=${x}"/>
      <arg value="-s:${x}.bml"/>
    </java>
  </target>
  
  <target name='desc-collection'>
    <echo>----------------------------------- ${id} ${x}</echo>
    <mkdir dir='results'/>
    <mkdir dir='results/${id}'/>
    <copy todir='results/${id}'>
      <fileset dir='.'>
        <include name='index.html'/>
      </fileset>
    </copy>
  </target>


  <target name='descf'>
    <process-books a='descf-book'/>
    <process-collections a='descf-collection'/>
  </target>

  <target name='descf-book'>
    <echo>----------------------------------- ${id} ${x}</echo>
    <mkdir dir='results'/>
    <mkdir dir='results/${id}'/>
    <java classname="net.sf.saxon.Transform" fork="true">
      <classpath refid="classpath"/>
      <arg value="-s:${x}.bml"/>
      <arg value="-xsl:${tools}/bml2descf.xsl"/>
      <arg value="collectionId=${collectionId}"/>
      <arg value="collectionName=${collectionName}"/>
      <arg value="bookFile={$x}"/>
      <arg value="-o:results/${id}/descf.html"/>
    </java>
  </target>
  
  <target name='descf-collection'>
    <echo>----------------------------------- ${id} ${x}</echo>
    <mkdir dir='results'/>
    <mkdir dir='results/${id}'/>
    <copy todir='results/${id}'>
      <fileset dir='.'>
        <include name='descf.html'/>
      </fileset>
    </copy>
  </target>




  <target name='export'>
    <process-books a='export-either'/>
    <process-collections a='export-either'/>
  </target>

  <target name='export-either'>
    <delete  dir='${exportdir}/${id}'/>
    <mkdir  dir='${exportdir}/${id}'/>
    <copy todir='${exportdir}/${id}' preservelastmodified="true">
      <fileset dir='results/${id}/'>
        <include name='*'/>
      </fileset>
    </copy>
  </target>


  <macrodef name='bv'>
    <attribute name='x'/>
    <attribute name='id'/>

    <sequential>
      <echo>----------------------------------- @{id} @{x}</echo>

      <mkdir dir='results'/>
      <delete dir='results/@{id}'/>
      <mkdir dir='results/@{id}'/>

      <mkdir dir='build'/>
      <delete dir='build/@{id}'/>
      <mkdir dir='build/@{id}'/>

      <!--============================================================ EPUB3 -->

      <sequential>
      <echo>== epub3</echo>
      <mkdir dir='build/@{id}/epub3'/>

      <toefele src='@{x}' dest='build/@{id}/epub3/text.bml' 
           endnotes='${endnotes}' review='${review}'
           correction='${correction}'
           tirage='${tirage-epub-font}'/>

      <spacehandler mode='rich'
                    src='build/@{id}/epub3/text.bml' 
                    dest='build/@{id}/epub3/text3.bml'/>
      
      <validate-bml src='build/@{id}/epub3/text3.bml'/>

      <java classname="net.sf.saxon.Transform" fork="true"
            outputproperty='font-files'>
        <classpath refid="classpath"/>
        <arg value="-xsl:${tools}/bml2fonts.xsl"/>
        <arg value="-s:edition.xml"/>
      </java>
      
      <java classname="net.sf.saxon.Transform" fork="true">
        <classpath refid="classpath"/>
        <arg value="-xsl:${tools}/bml2epub.xsl"/>
        <arg value="targetdir=build/@{id}/epub3/epub"/>
        <arg value="fonts=yes"/>
        <arg value="epub-fonts=${font-files}"/>
        <arg value="review=${review}"/>
        <arg value="eml=../../../edition.xml"/>
        <arg value="-s:build/@{id}/epub3/text3.bml"/>
      </java>

      <copy todir='build/@{id}/epub3/epub/OEBPS'>
        <fileset dir='${tools}'>
          <include name='style-common.css'/>
        </fileset>
      </copy>

      <copy todir='build/@{id}/epub3/epub/META-INF'>
        <fileset dir='${tools}'>
          <include name='com.apple.ibooks.display-options.xml'/>
        </fileset>
      </copy>

      <images src='build/@{id}/epub3/text3.bml'
              dest='build/@{id}/epub3/epub/OEBPS'/>

      <scripts src='build/@{id}/epub3/text3.bml'
               dest='build/@{id}/epub3/epub/OEBPS'/>

      <epubzip epubfile='results/@{id}/@{x}.epub' 
               dir='build/@{id}/epub3/epub'/>

      <fonts font-files='${font-files}'
             id='@{id}'
             x='@{x}'
             flavor='epub3'/>

      <epubzip epubfile='results/@{id}/@{x}.epub' 
               dir='build/@{id}/epub3/epub'/>

      <epub3check epub='results/@{id}/@{x}.epub'/>

      <!-- verify the size of component files -->
      <length property="bigfiles" mode="each">
        <fileset dir='build/@{id}/epub3/epub/OEBPS' includes='*.xml'>
          <size value='280' units='Ki' when='more'/>
        </fileset>
      </length>

      <echo level='error'>${bigfiles}</echo>

      </sequential>

    </sequential>

  </macrodef>



  <target name='tidy'>
    <delete dir='build'/>
  </target>

  <target name='supertidy' depends="tidy">
    <delete>
      <fileset dir="results" includes="**/*.epub"/>
      <fileset dir="results" includes="**/index.html"/>
      <fileset dir="results" includes="**/thumbnail.png"/>
    </delete>
  </target>

  <target name='clean' depends="tidy">
    <delete dir='results'/>
  </target>




  <macrodef name='thumbnail-from-text'>
    <attribute name='id' default='${id}'/>
    <attribute name="auteur"/>
    <attribute name="titre"/>

    <sequential>
      <exec executable='${imagemagick}'>
        <arg line="-size 110"/>
        <arg line="-gravity north -font 'calibri'  -pointsize 20       caption:' '         -append"/>
        <arg line="-gravity north -font 'calibri-italic' -pointsize 24 caption:'@{auteur}' -append"/>
        <arg line="-gravity north -font 'calibri'        caption:' '         -append"/>
        <arg line="-gravity north -font 'calibri'        caption:'@{titre}'  -append"/>
        <arg line="-extent 140x190"/>

        <arg line="-bordercolor white -border 5"/>
        <arg line="-bordercolor black -border 1"/>
        <arg line="-matte ( +clone -background grey -shadow 80x3+3+3 ) +swap -background none -mosaic"/>
        <arg line="results/@{id}/thumbnail.png"/>
      </exec>
    </sequential>
  </macrodef>

</project>

